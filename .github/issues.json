[
  {
    "service": "Auth Service",
    "issues": [
      {
        "task": "Register credentials (Step 2 - username/password)",
        "description": "Implement an endpoint for users to set up username and password with validation and uniqueness checks.",
        "labels": [
          "auth",
          "registration"
        ]
      },
      {
        "task": "Save hashed password",
        "description": "Hash passwords using bcrypt or a secure algorithm before saving to DB.",
        "labels": [
          "auth",
          "security"
        ]
      },
      {
        "task": "Set security questions & answers",
        "description": "Allow users to setup security questions and answers for identity verification.",
        "labels": [
          "auth",
          "security"
        ]
      },
      {
        "task": "Login endpoint",
        "description": "Authenticate users with username and password, return JWT on success.",
        "labels": [
          "auth",
          "login"
        ]
      },
      {
        "task": "Track failed login attempts",
        "description": "Record and monitor failed login attempts for security and lockout policies.",
        "labels": [
          "auth",
          "security"
        ]
      },
      {
        "task": "Lock account after 5 failed attempts",
        "description": "Temporarily lock user accounts after repeated failed login attempts to prevent brute force.",
        "labels": [
          "auth",
          "security"
        ]
      },
      {
        "task": "JWT generation via Keycloak",
        "description": "Leverage Keycloak to issue and validate JWT tokens for authenticated sessions.",
        "labels": [
          "auth",
          "security",
          "keycloak"
        ]
      },
      {
        "task": "Logout endpoint",
        "description": "End user sessions by invalidating tokens or clearing sessions.",
        "labels": [
          "auth",
          "logout"
        ]
      },
      {
        "task": "Password reset (via token/email)",
        "description": "Allow users to reset their password via a secure token sent by email.",
        "labels": [
          "auth",
          "security",
          "reset"
        ]
      },
      {
        "task": "Change password",
        "description": "Secure route for users to change their password with current credentials validation.",
        "labels": [
          "auth",
          "security"
        ]
      },
      {
        "task": "Setup Realm",
        "description": "Configure Keycloak Realm with roles.",
        "labels": [
          "security",
          "keycloak"
        ]
      },
      {
        "task": "Create client for Gateway",
        "description": "Setup Keycloak client for API Gateway.",
        "labels": [
          "security",
          "keycloak"
        ]
      },
      {
        "task": "Token lifespan configuration",
        "description": "Adjust token expiry settings.",
        "labels": [
          "security",
          "keycloak"
        ]
      },
      {
        "task": "Map roles to APIs",
        "description": "Map Keycloak roles to microservice API access.",
        "labels": [
          "security",
          "keycloak"
        ]
      },
      {
        "task": "Add users via backend or console",
        "description": "Add admin users through Keycloak console.",
        "labels": [
          "security",
          "keycloak"
        ]
      },
      [
  {
    "service": "Cross-Cutting Tasks",
    "issues": [
      {
        "task": "Base exception handling",
        "description": "Implement global exception handlers across services.",
        "labels": [
          "cross-cutting",
          "exception"
        ]
      },
      {
        "task": "Request validation",
        "description": "Validate incoming API requests consistently.",
        "labels": [
          "cross-cutting",
          "validation"
        ]
      },
      {
        "task": "Swagger/OpenAPI docs",
        "description": "Generate and maintain API documentation.",
        "labels": [
          "cross-cutting",
          "documentation"
        ]
      },
      {
        "task": "Global logging setup",
        "description": "Set up logging framework and correlation IDs.",
        "labels": [
          "cross-cutting",
          "logging"
        ]
      },
      {
        "task": "Kafka base config",
        "description": "Standardize Kafka configuration for all event-driven services.",
        "labels": [
          "cross-cutting",
          "kafka"
        ]
      },
      {
        "task": "MongoDB base repo",
        "description": "Create a common repository layer for MongoDB access.",
        "labels": [
          "cross-cutting",
          "database"
        ]
      },
      {
        "task": "Common entity annotations",
        "description": "Define shared entity annotations like timestamps and soft deletes.",
        "labels": [
          "cross-cutting"
        ]
      },
      {
        "task": "Correlation ID in logs",
        "description": "Implement correlation IDs in logs for tracing.",
        "labels": [
          "cross-cutting",
          "logging"
        ]
      },
      {
        "task": "GitHub Actions CI/CD",
        "description": "Implement CI/CD pipelines for all services.",
        "labels": [
          "cross-cutting",
          "ci/cd"
        ]
      }
    ]
  }
]




